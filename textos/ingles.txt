Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.

Data compression is a fundamental discipline in modern computing, whose main objective is to reduce the space required to store or transmit information without losing a single bit of its original meaning. Over the past few decades, a wide range of methods and algorithms have been developed, from pioneering ones based on dynamic dictionaries, such as LZ78 and LZW, to more recent ones that combine statistical and entropy coding techniques, such as DEFLATE (used by Gzip) and Brotli. Each algorithm has advantages and disadvantages depending on the type of content: text, images, audio, or video. In the case of text, compression takes advantage of the repetitions of character patterns and linguistic structures specific to each language. For example, in Spanish, definite articles and conjunctions are very common, while in other languages, accented vowels or diacritical marks can alter symbol frequencies. Furthermore, word length and complexity directly influence the efficiency of dictionary-based compression schemes. With a large and homogeneous corpus, dynamic dictionaries learn and represent phrases or character sequences that are repeated with a high probability, which generates shorter codes compared to individual sequences. In a parallel compression environment, such as the one we will evaluate with parallel LZ78, the text is divided into fragments and each processing unit builds its own local dictionary; the compressed fragments are then concatenated, seeking to minimize both execution time and memory overhead. This process will allow us to compare, under the same conditions and with a text of considerable length, which of the algorithms (parallel LZ78, classic LZW, Gzip, and Brotli) offers the best balance between compression ratio and processing speed in Spanish.